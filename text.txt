import cv2
import numpy as np
import pytesseract
import RPi.GPIO as GPIO
import time
from picamera2 import Picamera2
from RPLCD.gpio import CharLCD
from datetime import datetime
from gpiozero import AngularServo

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

# Pin Configuration
IR_ENTRY = 17
IR_EXIT = 4

ULTRASONICS = {
    'entry': {'TRIG': 5, 'ECHO': 6},
    'exit': {'TRIG': 13, 'ECHO': 19},
    'slot1': {'TRIG': 20, 'ECHO': 21},
    'slot2': {'TRIG': 26, 'ECHO': 16}
}

SERVO_PIN = 18

# Setup IR Sensors
GPIO.setup(IR_ENTRY, GPIO.IN)
GPIO.setup(IR_EXIT, GPIO.IN)

# Setup Ultrasonic Sensors
for name, us in ULTRASONICS.items():
    GPIO.setup(us['TRIG'], GPIO.OUT)
    GPIO.setup(us['ECHO'], GPIO.IN)
    print(f"[DEBUG] Set up ultrasonic sensor: {name}")

# LCD Setup
lcd = CharLCD(numbering_mode=GPIO.BCM, cols=16, rows=2,
              pin_rs=7, pin_e=8, pins_data=[25, 24, 23, 12])

# Servo Setup
servo = AngularServo(SERVO_PIN, min_angle=0, max_angle=90)

# Camera Setup
picam2 = Picamera2()
picam2.configure(picam2.create_preview_configuration(main={"size": (1280, 720)}))
picam2.start()

unreg_entry_time = None

def measure_distance(sensor):
    TRIG = ULTRASONICS[sensor]['TRIG']
    ECHO = ULTRASONICS[sensor]['ECHO']

    GPIO.output(TRIG, False)
    time.sleep(0.01)

    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)

    start_time = time.time()
    timeout = start_time + 0.05

    while GPIO.input(ECHO) == 0:
        start = time.time()
        if start > timeout:
            print(f"[WARN] {sensor} echo not received (start)")
            return 999

    timeout = time.time() + 0.05
    while GPIO.input(ECHO) == 1:
        stop = time.time()
        if stop > timeout:
            print(f"[WARN] {sensor} echo stuck high (stop)")
            return 999

    elapsed = stop - start
    distance = (elapsed * 34300) / 2
    print(f"[DEBUG] Distance ({sensor}): {distance:.2f} cm")
    return distance

def capture_image():
    frame = picam2.capture_array()
    return cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

def extract_plate(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.bilateralFilter(gray, 11, 90, 90)
    edges = cv2.Canny(blur, 30, 200)
    cnts, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    for c in sorted(cnts, key=cv2.contourArea, reverse=True)[:30]:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:
            x, y, w, h = cv2.boundingRect(c)
            return image[y:y+h, x:x+w]
    return None

def recognize_plate(plate_img):
    gray = cv2.cvtColor(plate_img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)

    # Debugging output
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    cv2.imwrite(f"debug_thresh_{timestamp}.jpg", thresh)
    cv2.imshow("Detected Plate", plate_img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    text = pytesseract.image_to_string(thresh, config='--psm 7')
    return ''.join(e for e in text if e.isalnum())

def check_database(plate_text):
    try:
        with open('Database.txt', 'r') as f:
            return any(plate_text in line for line in f)
    except FileNotFoundError:
        lcd.clear()
        lcd.write_string("No DB Found!")
        return False

def open_gate():
    lcd.clear()
    lcd.write_string("Opening Gate")
    print("[INFO] Gate opening...")
    servo.angle = 90
    time.sleep(3)
    servo.angle = 0
    lcd.clear()
    lcd.write_string("Gate Closed")
    print("[INFO] Gate closed.")
    time.sleep(2)

def check_car_leaving():
    return GPIO.input(IR_EXIT) == 0 or measure_distance('exit') < 15

def update_parking_status():
    slot1 = measure_distance('slot1')
    slot2 = measure_distance('slot2')

    print(f"[DEBUG] Slot1: {slot1:.2f} cm, Slot2: {slot2:.2f} cm")

    lcd.clear()
    if slot1 < 10 and slot2 < 10:
        lcd.write_string("Parking Full")
    else:
        lcd.write_string("Space Available")

def main():
    global unreg_entry_time
    lcd.clear()
    lcd.write_string("System Ready")
    print("[INFO] System Ready")

    while True:
        print("[DEBUG] Loop running...")
        update_parking_status()

        entry_distance = measure_distance('entry')
        print(f"[DEBUG] Entry distance: {entry_distance:.2f} cm")

        if entry_distance < 15:
            lcd.clear()
            lcd.write_string("Car at Gate")
            print("[INFO] Car detected at gate")

            time.sleep(1)
            img = capture_image()
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            img_path = f"captured_{timestamp}.jpg"
            cv2.imwrite(img_path, img)
            print(f"[INFO] Image saved: {img_path}")

            plate = extract_plate(img)
            if plate is not None:
                plate_path = f"plate_{timestamp}.jpg"
                cv2.imwrite(plate_path, plate)
                print(f"[INFO] Plate image saved: {plate_path}")

                plate_text = recognize_plate(plate)
                if plate_text:
                    print(f"[INFO] Detected Plate: {plate_text}")
                    lcd.clear()
                    lcd.write_string(f"Plate: {plate_text[:16]}")

                    if check_database(plate_text):
                        lcd.clear()
                        lcd.write_string("Welcome!")
                        print("[INFO] Plate found in DB")
                        open_gate()
                    else:
                        lcd.clear()
                        lcd.write_string("Visitor Car")
                        print("[INFO] Visitor car")
                        time.sleep(1)
                        lcd.clear()
                        lcd.write_string("Timer Started")
                        unreg_entry_time = datetime.now()
                        open_gate()

                    lcd.clear()
                    lcd.write_string("Sleeping 20 sec")
                    print("[INFO] Sleeping 20 sec...")
                    time.sleep(20)
                else:
                    print("[WARN] Plate text not recognized")
                    lcd.clear()
                    lcd.write_string("Plate Not Clear")
                    time.sleep(2)
            else:
                print("[WARN] No plate found in image")
                lcd.clear()
                lcd.write_string("No Plate Found")
                time.sleep(2)

        if unreg_entry_time and check_car_leaving():
            lcd.clear()
            lcd.write_string("Car Leaving...")
            print("[INFO] Car is leaving")

            duration = (datetime.now() - unreg_entry_time).seconds
            time.sleep(2)

            lcd.clear()
            lcd.write_string(f"Time: {duration}s")
            print(f"[INFO] Duration inside: {duration} seconds")
            time.sleep(3)

            lcd.clear()
            lcd.write_string("Visit Ended")
            print("[INFO] Visitor session ended")
            unreg_entry_time = None
            time.sleep(2)

        time.sleep(0.5)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        GPIO.cleanup()
        lcd.clear()
        lcd.write_string("System Stopped")
        print("[INFO] System manually stopped")
        cv2.destroyAllWindows()











/////////////////////////////

import RPi.GPIO as GPIO
import time

servo_pin = 18  # Use GPIO 18 (Pin 12)

GPIO.setmode(GPIO.BCM)
GPIO.setup(servo_pin, GPIO.OUT)

# Set PWM frequency to 50Hz (standard for servos)
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(0)

def set_angle(angle):
    duty_cycle = 2 + (angle / 18)  # Convert angle to duty cycle
    GPIO.output(servo_pin, True)
    pwm.ChangeDutyCycle(duty_cycle)
    time.sleep(0.5)
    GPIO.output(servo_pin, False)
    pwm.ChangeDutyCycle(0)

try:
    while True:
        angle = float(input("Enter angle (0 to 180): "))
        if 0 <= angle <= 180:
            set_angle(angle)
        else:
            print("Angle must be between 0 and 180.")
except KeyboardInterrupt:
    print("Program stopped")
finally:
    pwm.stop()
    GPIO.cleanup()
