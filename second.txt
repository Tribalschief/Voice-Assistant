import cv2
import time
import pytesseract
from datetime import datetime
from picamera2 import Picamera2
from RPLCD.gpio import CharLCD
import RPi.GPIO as GPIO

# GPIO mode
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)


# LCD setup
lcd = CharLCD(
    numbering_mode=GPIO.BCM,
    cols=16,
    rows=2,
    pin_rs=7,
    pin_e=8,
    pins_data=[25, 24, 23, 12]
)

# Camera setup
picam2 = Picamera2()
picam2.configure(picam2.create_preview_configuration(main={"size": (1280, 720)}))
picam2.start()

def capture_image():
    frame = picam2.capture_array()
    return cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

def extract_plate(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.bilateralFilter(gray, 11, 90, 90)
    edges = cv2.Canny(blur, 30, 200)
    cnts, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    for c in sorted(cnts, key=cv2.contourArea, reverse=True)[:30]:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:
            x, y, w, h = cv2.boundingRect(c)
            return image[y:y+h, x:x+w]
    return None

def recognize_plate(plate_img):
    gray = cv2.cvtColor(plate_img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
    cv2.imshow("Detected Plate", plate_img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    text = pytesseract.image_to_string(thresh, config='--psm 7')
    return ''.join(e for e in text if e.isalnum())

def main():
    lcd.clear()
    lcd.write_string("Capturing...")
    print("[INFO] Capturing image")

    time.sleep(1)
    img = capture_image()

    lcd.clear()
    lcd.write_string("Processing...")
    print("[INFO] Processing image")

    plate = extract_plate(img)
    if plate is not None:
        text = recognize_plate(plate)
        if text:
            print(f"[INFO] Plate Text: {text}")
            lcd.clear()
            lcd.write_string("Loading...")
            time.sleep(1)
            lcd.clear()
            lcd.write_string(text[:16])  # Truncate if longer than 16 chars
        else:
            print("[WARN] Text not recognized")
            lcd.clear()
            lcd.write_string("Plate Not Clear")
    else:
        print("[WARN] No plate found")
        lcd.clear()
        lcd.write_string("No Plate Found")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        GPIO.cleanup()
        lcd.clear()
        lcd.write_string("Stopped")
        print("[INFO] Interrupted by user")






////////////////////////


import cv2
import numpy as np
import pytesseract
import RPi.GPIO as GPIO
import time
from picamera2 import Picamera2
from RPLCD.gpio import CharLCD

# --- GPIO Setup ---
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

BUZZ_PIN = 18
BARRIER_PIN = 17
GPIO.setup(BUZZ_PIN, GPIO.OUT)
GPIO.setup(BARRIER_PIN, GPIO.OUT)

time.sleep(0.5)
# --- LCD 1602A Setup (Without I2C) ---
lcd = CharLCD(
    numbering_mode=GPIO.BCM,
    cols=16,
    rows=2,
    pin_rs=7,
    pin_e=8,
    pins_data=[25, 24, 23, 12]
)
time.sleep(0.5)
lcd.clear()
# --- PiCamera2 Setup ---
picam2 = Picamera2()
picam2.configure(picam2.create_preview_configuration(main={"size": (1280, 720)}))
picam2.start()

def capture_image():
    frame = picam2.capture_array()
    return cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

def plate_extraction(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.bilateralFilter(gray, 11, 90, 90)
    edges = cv2.Canny(blur, 30, 200)
    cnts, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:30]

    for c in cnts:
        perimeter = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * perimeter, True)
        if len(approx) == 4:
            x, y, w, h = cv2.boundingRect(c)
            return image[y:y+h, x:x+w]
    return None

def ocr_processing(plate):
    text = pytesseract.image_to_string(plate, config='--psm 7')
    return ''.join(e for e in text if e.isalnum())

def check_database(plate_text):
    try:
        with open('Database.txt', 'r') as f:
            return any(plate_text in line for line in f)
    except FileNotFoundError:
        print("[ERROR] Database file not found!")
        return False

def control_barrier(state):
    GPIO.output(BARRIER_PIN, state)
    time.sleep(1) if state else time.sleep(0.5)

def lcd_display(line1, line2=""):
    lcd.clear()
    lcd.write_string(line1[:16])
    if line2:
        lcd.cursor_pos = (1, 0)
        lcd.write_string(line2[:16])

def main():
    print("üöó ANPR System Started... Press 'q' to Quit.")
    lcd_display("ANPR System", "Ready")

    while True:

        frame = capture_image()
        plate = plate_extraction(frame)
       cv2.imshow("Frame", frame)
        if plate is not None:
            plate_text = ocr_processing(plate)

            if plate_text:
                print(f"Detected Plate: {plate_text}", end=' ')
                lcd_display("Plate: " + plate_text)

                if check_database(plate_text):
                    print("[REGISTERED] ‚úÖ Opening Barrier...")
                    lcd_display("Plate: " + plate_text, "Access Granted")
                    GPIO.output(BUZZ_PIN, GPIO.HIGH)
                    control_barrier(GPIO.HIGH)
                    time.sleep(0.5)
                    GPIO.output(BUZZ_PIN, GPIO.LOW)
                    control_barrier(GPIO.LOW)
                else:
                    print("[UNREGISTERED] ‚ùå Access Denied!")
                    lcd_display("Plate: " + plate_text, "Access Denied")
                    GPIO.output(BUZZ_PIN, GPIO.HIGH)
                    time.sleep(0.2)
                    GPIO.output(BUZZ_PIN, GPIO.LOW)

        key = cv2.waitKey(1) & 0xFF
if key == ord('q'):
    break

    print("Shutting Down...")
    lcd_display("System Stopped")
    picam2.stop()
    GPIO.cleanup()

cv2.destroyAllWindows()
if __name__ == "__main__":
    main()


///////////////////////////////////////////////////////////////////////////////////////////////


import cv2
import numpy as np
import pytesseract
import RPi.GPIO as GPIO
import time
from picamera2 import Picamera2
from RPLCD.gpio import CharLCD

# --- GPIO Setup ---
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

BUZZ_PIN = 18
BARRIER_PIN = 17
GPIO.setup(BUZZ_PIN, GPIO.OUT)
GPIO.setup(BARRIER_PIN, GPIO.OUT)

# --- LCD 1602A Setup (Without I2C) ---
# !! DOUBLE CHECK THESE PINS MATCH YOUR WIRING !!
try:
    lcd = CharLCD(
        numbering_mode=GPIO.BCM,
        cols=16,
        rows=2,
        pin_rs=7,
        pin_e=8,
        pins_data=[25, 24, 23, 12],
        charmap='A00', # Standard European character map
        auto_linebreaks=True
    )
    lcd.clear() # Clear display on startup
    lcd_ready = True
    print("LCD Initialized Successfully.")
except Exception as e:
    print(f"[ERROR] Failed to initialize LCD: {e}")
    print("Check GPIO connections and RPLCD installation.")
    lcd_ready = False
    # Define dummy lcd functions if init fails to avoid errors later
    class DummyLCD:
        def write_string(self, text): pass
        def clear(self): pass
        def cursor_pos(self, pos): pass
    lcd = DummyLCD()


# --- PiCamera2 Setup ---
picam2 = Picamera2()
# Lower resolution can sometimes speed up processing, but might reduce detection range
picam2.configure(picam2.create_preview_configuration(main={"size": (1024, 576)}))
picam2.start()
# Allow camera sensor to settle
time.sleep(2.0)
print("Camera Initialized.")


# --- Helper Function for Perspective Transform ---
def order_points(pts):
    # Initialize a list of coordinates that will be ordered
    # such that the first entry is the top-left,
    # the second entry is the top-right, the third is the
    # bottom-right, and the fourth is the bottom-left
    rect = np.zeros((4, 2), dtype="float32")

    # The top-left point will have the smallest sum, whereas
    # the bottom-right point will have the largest sum
    s = pts.sum(axis=1)
    rect[0] = pts[np.argmin(s)]
    rect[2] = pts[np.argmax(s)]

    # Now, compute the difference between the points, the
    # top-right point will have the smallest difference,
    # whereas the bottom-left will have the largest difference
    diff = np.diff(pts, axis=1)
    rect[1] = pts[np.argmin(diff)]
    rect[3] = pts[np.argmax(diff)]

    # Return the ordered coordinates
    return rect

def perspective_transform(image, pts):
    # Obtain the ordered points
    rect = order_points(pts)
    (tl, tr, br, bl) = rect

    # Compute the width of the new image, which will be the
    # maximum distance between bottom-right and bottom-left
    # x-coordinates or the top-right and top-left x-coordinates
    widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    maxWidth = max(int(widthA), int(widthB))

    # Compute the height of the new image, which will be the
    # maximum distance between the top-right and bottom-right
    # y-coordinates or the top-left and bottom-left y-coordinates
    heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    maxHeight = max(int(heightA), int(heightB))

    # Define the destination points for the warped image
    # (standard rectangle shape)
    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype="float32")

    # Compute the perspective transform matrix and then apply it
    M = cv2.getPerspectiveTransform(rect, dst)
    warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))

    # Return the warped image
    return warped

# --- Image Processing Functions ---
def capture_image():
    # Capture frame as numpy array BGR format
    frame = picam2.capture_array("main")
    # Picamera2 gives RGB, OpenCV uses BGR
    # No need for cvtColor if capture_array gives BGR - check documentation or test
    # If it's RGB, uncomment the next line:
    # frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
    return frame

def plate_extraction(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Increase bilateral filter parameters slightly if needed for noise
    blur = cv2.bilateralFilter(gray, 11, 17, 17) # Or use GaussianBlur: cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150) # Adjust thresholds as needed

    # Find contours
    cnts, _ = cv2.findContours(edges.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    # Sort contours by area, keep top 10
    cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:10]

    plate_contour = None
    # Loop over contours
    for c in cnts:
        perimeter = cv2.arcLength(c, True)
        # Approximate the contour with fewer points
        # The epsilon value (0.018 * perimeter) might need tuning
        approx = cv2.approxPolyDP(c, 0.018 * perimeter, True)

        # If our approximated contour has four points, we assume it's the plate
        if len(approx) == 4:
            plate_contour = approx
            break # Found a potential plate

    if plate_contour is None:
        # print("No 4-point contour found")
        return None
    else:
        # print("Found potential plate contour")
        # Reshape contour points for perspective transform
        pts = plate_contour.reshape(4, 2)
        # Apply perspective transform using the original image (not grayscale)
        # to preserve color info if needed later, though OCR works on gray/binary
        warped_plate = perspective_transform(image, pts)

        # Optional: Display the warped plate for debugging
        # cv2.imshow("Warped Plate", warped_plate)

        return warped_plate

def ocr_processing(plate_image):
    if plate_image is None or plate_image.size == 0:
        return ""

    # --- Preprocessing for OCR ---
    # Resize for potentially better OCR - height of 60px is often good
    target_height = 60
    aspect_ratio = plate_image.shape[1] / plate_image.shape[0]
    target_width = int(target_height * aspect_ratio)
    if target_width > 0 and target_height > 0:
        plate_image = cv2.resize(plate_image, (target_width, target_height), interpolation=cv2.INTER_AREA)

    # Convert warped image to grayscale
    gray_plate = cv2.cvtColor(plate_image, cv2.COLOR_BGR2GRAY)

    # Apply a slight blur before thresholding to reduce noise
    blurred_plate = cv2.GaussianBlur(gray_plate, (3, 3), 0) # Kernel size (3,3) or (5,5)

    # Adaptive Thresholding
    # Use ADAPTIVE_THRESH_GAUSSIAN_C for better handling of varying illumination
    # Block size needs to be odd number (e.g., 11, 13, 15...)
    # C is a constant subtracted from the mean or weighted sum
    binary_plate = cv2.adaptiveThreshold(
        blurred_plate,
        255, # Max value to assign
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
        cv2.THRESH_BINARY_INV, # Invert threshold (black text on white background often works better)
        15, # Block size (needs tuning based on character size)
        7   # Constant C (needs tuning)
    )

    # Optional: Display the thresholded plate for debugging
    # cv2.imshow("Thresholded Plate", binary_plate)

    # --- Tesseract OCR ---
    # Configure Tesseract
    # --psm 7: Treat the image as a single text line.
    # -c tessedit_char_whitelist: Restrict characters to common plate chars
    # Adjust whitelist based on your region's license plates!
    custom_config = r'--oem 3 --psm 7 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

    try:
        text = pytesseract.image_to_string(binary_plate, config=custom_config)
        # Clean up whitespace and non-alphanumeric characters from the result
        cleaned_text = ''.join(e for e in text if e.isalnum())
        return cleaned_text
    except pytesseract.TesseractNotFoundError:
        print("[ERROR] Tesseract is not installed or not in your PATH.")
        return ""
    except Exception as e:
        print(f"[ERROR] OCR failed: {e}")
        return ""


def check_database(plate_text):
    if not plate_text: # Don't check empty strings
        return False
    try:
        with open('Database.txt', 'r') as f:
            # Read all lines and strip whitespace/newlines
            database_plates = [line.strip().upper() for line in f]
            # Check if the detected plate (converted to uppercase) is in the list
            return plate_text.upper() in database_plates
    except FileNotFoundError:
        print("[ERROR] Database.txt file not found in the script's directory!")
        # Create an empty file if it doesn't exist? Or just return False.
        # with open('Database.txt', 'w') as f: pass # Creates empty file
        return False
    except Exception as e:
        print(f"[ERROR] Error reading database: {e}")
        return False


def control_barrier(state):
    GPIO.output(BARRIER_PIN, state)
    time.sleep(1) # Keep barrier open/closed for 1 second

def lcd_display(line1, line2=""):
    if not lcd_ready: return # Do nothing if LCD failed to init
    try:
        lcd.clear()
        lcd.cursor_pos = (0, 0)
        lcd.write_string(line1[:16]) # Ensure text fits 16 columns
        if line2:
            lcd.cursor_pos = (1, 0)
            lcd.write_string(line2[:16]) # Ensure text fits 16 columns
    except Exception as e:
        print(f"[ERROR] Failed to write to LCD: {e}")
        # Optionally, try to re-initialize LCD here? Risky in a loop.

def main():
    print("üöó ANPR System Started...")
    # Update instruction for quitting if using imshow
    print("Press 'q' in the video window to Quit.")
    lcd_display("ANPR System", "Initializing...")
    time.sleep(1)
    lcd_display("ANPR System", "Ready")

    last_plate = ""
    last_detection_time = 0
    debounce_time = 5 # Seconds to wait before processing the same plate again

    try:
        while True:
            # <<< Start of the loop block >>>
            frame = capture_image() # Indentation Level 1
            if frame is None:      # Indentation Level 1
                time.sleep(0.1)    # Indentation Level 2
                continue  
            

            extracted_plate_img = plate_extraction(frame)

            # --- Optional: Display main frame ---
            #cv2.imshow("ANPR Feed", frame)
            #display_frame = frame.copy()         
           # cv2.imshow("ANPR Feed", display_frame)
            if extracted_plate_img is not None:
                plate_text = ocr_processing(extracted_plate_img)

                current_time = time.time()

                # Basic debouncing: Check if plate is found and different from last OR enough time passed
                if plate_text and (plate_text != last_plate or (current_time - last_detection_time > debounce_time)):
                    print(f"Detected Plate: {plate_text}", end=' ')
                    lcd_display("Plate: " + plate_text)
                    last_plate = plate_text
                    last_detection_time = current_time

                    if check_database(plate_text):
                        print("[REGISTERED] ‚úÖ Access Granted!")
                        lcd_display(plate_text, "Access Granted")
                        GPIO.output(BUZZ_PIN, GPIO.HIGH)
                        control_barrier(GPIO.HIGH) # Open barrier
                        time.sleep(0.5) # Buzzer duration
                        GPIO.output(BUZZ_PIN, GPIO.LOW)
                        time.sleep(3) # Keep barrier open for 3 seconds
                        control_barrier(GPIO.LOW) # Close barrier
                        lcd_display("ANPR System", "Ready") # Reset LCD after action
                        time.sleep(2) # Wait a bit before next detection cycle


                    else:
                        print("[UNREGISTERED] ‚ùå Access Denied!")
                        lcd_display(plate_text, "Access Denied")
                        # Short buzz for denial
                        for _ in range(2): # Beep twice
                           GPIO.output(BUZZ_PIN, GPIO.HIGH)
                           time.sleep(0.15)
                           GPIO.output(BUZZ_PIN, GPIO.LOW)
                           time.sleep(0.1)
                        time.sleep(2) # Show denied message for a bit
                        lcd_display("ANPR System", "Ready") # Reset LCD
                        time.sleep(1) # Wait a bit


            # --- Handle quitting ---
            # If using cv2.imshow, waitKey is needed. Otherwise, rely on Ctrl+C
            # key = cv2.waitKey(1) & 0xFF
            # if key == ord('q'):
            #   break
            # Minimal delay to prevent 100% CPU usage if no plate found
            time.sleep(0.05)


    except KeyboardInterrupt:
        print("\nüõë Ctrl+C detected. Shutting Down...")
    finally:
        print("Cleaning up...")
        lcd_display("System Stopped", "")
        time.sleep(1)
        if lcd_ready:
             lcd.clear() # Clear LCD at the end
        # cv2.destroyAllWindows() # If using cv2.imshow
        picam2.stop()
        GPIO.cleanup()
        print("GPIO Cleaned Up. Exiting.")


if __name__ == "__main__":
    # Check if Tesseract is available before starting
    try:
        pytesseract.get_tesseract_version()
        print(f"Tesseract version: {pytesseract.get_tesseract_version()}")
    except pytesseract.TesseractNotFoundError:
        print("="*30)
        print("[FATAL ERROR] Tesseract is not installed or not found in PATH.")
        print("Please install Tesseract OCR:")
        print("  sudo apt update && sudo apt install tesseract-ocr")
        print("And ensure the python wrapper is installed:")
        print("  pip install pytesseract")
        print("="*30)
        exit() # Exit if Tesseract is not found

    # Check if Database.txt exists
    try:
        with open('Database.txt', 'r') as f:
             print("Database.txt found.")
             # Optional: Print number of entries
             # print(f"  Contains {len(f.readlines())} entries.")
    except FileNotFoundError:
         print("[WARNING] Database.txt not found. Creating an empty one.")
         print("  Please add authorized license plates (one per line) to Database.txt")
         with open('Database.txt', 'w') as f:
             pass # Create empty file

    main()

